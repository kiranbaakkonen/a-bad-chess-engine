#ifndef BOARD_H
#define BOARD_H

/*
    enum of pieces
    board is an 8X8 array of pieces
*/

enum piece {
    INVALID = -1,
    EMPTY,
    PAWN,
    ROOK,
    KNIGHT,
    BISHOP,
    QUEEN,
    KING,

};

enum player {
    NONE = -1,
    WHITE,
    BLACK
};

enum move{
    NO_MOVE,
    MOVE,
    ATTACK
};

class Board{
    
    public:
        piece board[12][12] = {
            {INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID},
            {INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID},
            {INVALID, INVALID, ROOK, KNIGHT, BISHOP, QUEEN, KING, BISHOP, KNIGHT, ROOK, INVALID, INVALID},
            {INVALID, INVALID, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, INVALID, INVALID},
            {INVALID, INVALID, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, INVALID, INVALID},
            {INVALID, INVALID, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, INVALID, INVALID},
            {INVALID, INVALID, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, INVALID, INVALID},
            {INVALID, INVALID, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, INVALID, INVALID},
            {INVALID, INVALID, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, INVALID, INVALID},
            {INVALID, INVALID, ROOK, KNIGHT, BISHOP, QUEEN, KING, BISHOP, KNIGHT, ROOK, INVALID, INVALID},
            {INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID},
            {INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID},
        };

        player color[12][12] = {
            {NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE},
            {NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE},
            {NONE, NONE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, NONE, NONE},
            {NONE, NONE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, NONE, NONE},
            {NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE},
            {NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE},
            {NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE},
            {NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE},
            {NONE, NONE, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, NONE, NONE},
            {NONE, NONE, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, NONE, NONE},
            {NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE},
            {NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE},
        };
        
        void printBoard();
        void printMoveSet(move moves[12][12]);
        void getValidMoves(move moves[12][12], int row, int col);
        void loadBoard(piece b[8][8], player c[8][8]);
};


#endif